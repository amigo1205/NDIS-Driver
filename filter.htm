<!DOCTYPE HTML>
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>NDISLWF</title>
</head>

<body>

<h1>NDISLWF.SYS - Sample NDIS 6.0 Filter Driver</h1>

<p>Note: the sample driver contains some extra code for demonstration purposes.
You should remove unneeded optional sections from a production driver.</p>

<h2>SUMMARY</h2>

<h3>Ndislwf NDIS 6.0 Filter Driver</h3>

<p>The Ndislwf sample is currently a do-nothing pass-through NDIS 6 filter
driver that demonstrates the basic principles underlying an NDIS 6.0 Filter
driver. The sample is a replacement of NDIS 5 Sample Intermediate
Driver (Passthru driver).</p>

<p>Although the filter driver is a Modifying filter driver, the filter driver
currently doesn’t modify any packets and it only re-packages and sends down all
OID requests.  You may easily update this filter driver to change packets
before passing them along. Or you may use the filter to originate new packets
to send or receive. For example, the filter could encrypt/compress outgoing and
decrypt/decompress incoming data.</p>

<h2>BUILDING THE SAMPLE</h2>

<p>Run the <b>build</b> command from this directory to build the
sample&mdash;it creates the binary Ndislwf.sys.</p>

<p>To install this driver on Windows Vista (or above), use netlwf.INF also
found in this DDK.</p>

<h2>INSTALLING THE SAMPLE</h2>

<p>Ndislwf is installed as a service (called “NDIS Sample LightWeight Filter”
in the supplied INF). To install, follow the steps below:</p>

<ol>

<li>Prepare a an installation directory that contains these files: netlwf.inf
and ndislwf.sys.</li>

<li>On the desktop, click <b>Start</b>, then open <b>Control Panel</b>, then
open <b>Network and Internet Connections</b>, then open <b>Network
Connections</b>, then right-click on the relevant Local Area Connection icon
and choose <b>Properties</b>.</li>

<li>Click <b>Install</b>, then <b>Service</b>, then <b>Add</b>, then <b>Have
Disk</b>.</li>

<li>Browse to the drive/directory containing the files listed above. Click
<b>OK</b>. This should show “NDIS Sample LightWeight Filter” in a list of
Network Services. Highlight this and click <b>OK</b>. This should install the
Ndislwf filter driver.</li>

<li>Click <b>OK</b> or <b>Yes</b> each time if the system prompts with a warning
regarding installation of unsigned files. This is necessary because binaries
generated via the LDK build environment are not signed.</li>

</ol>

<h2>CODE TOUR</h2>

<h3>File Manifest</h3>

<table>

<tr><td><u>File</u></td><td><u>Description</u></td></tr>

<tr><td>makefile</td><td>Used during compilation to create the object and sys
files</td></tr>

<tr><td>filter.c</td><td>Filter driver entry points and related functions in
the Ndislwf filter driver</td></tr>

<tr><td>netlwf.inf</td><td>Installation INF for the service</td></tr>

<tr><td>device.c</td><td>Virtual device related routines such as registering a
device and handling IOCTLs</td></tr>

<tr><td>filter.h</td><td>Prototypes of all functions and data structures used
by the Ndislwf driver</td></tr>

<tr><td>filter.htm</td><td>Documentation for the filter driver (this
        file)</td></tr>

<tr><td>filter.rc</td><td>Resource file for the Ndislwf driver</td></tr>

<tr><td>precomp.h</td><td>Precompile header file</td></tr>

<tr><td>flt_dbg.c</td><td>Debug-related code</td></tr>

<tr><td>flt_dbg.h</td><td>Debug code definitions and structures</td></tr>

<tr><td>sources</td><td>List of source files that are compiled and linked to
create the ndislwf driver.</td></tr>

</table>

<h3>Programming Tour</h3>

<p>Basic steps in attaching and detaching of Ndislwf driver:</p>

<ol>

<li>During DriverEntry, the ndislwf driver registers as a NDIS 6 filter
driver.</li>

<li>Later on, NDIS calls Ndislwf FilterAttach handler, for each underlying NDIS
adapter on which it is configured to attach.</li>

<li>In the context of FilterAttach Handler, filter driver call NdisFAttribute
to register its filter module context with NDIS. After that, filter driver can
read its own setting in registry by calling NdisOpenConfigurationEx, and calls
NdisXXX functions.</li>

<li>After FilterAttach successfully returns, NDIS restarts the filter later by
calling FilterRestart handler. FilterRestart should prepare to handle
send/receive data. After restart return successfully, filter driver should be
able to process send/receive.</li>

<li>All requests and sends coming from overlying drivers for the Ndislwf filter
driver are repackaged if necessary and sent down to NDIS, to be passed to the
underlying NDIS driver.</li>

<li>All indications arriving from an underlying NDIS driver are forwarded up by
Ndislwf filter driver.</li>

<li>NDIS call FilterPause handler when NDIS needs to detach the filter from the
stack or there is some configuration changes in the stack. In processing the
pause request from NDIS, the Ndislwf driver waits for all its own outstanding
requests to be completed before it completes the pause request.</li>

<li>NDIS calls the Ndislwf driver’s FilterDetach entry point when NDIS needs to
detach a filter module from NDIS stack.  FilterDetach handler should free all
the memory allocation done in FilterAttach, and undo the operations it did in
FilterAttach Handler.</li>

</ol>

<p>&copy; Microsoft Corporation</p>

</body>

</html>
